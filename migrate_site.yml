---
- hosts: localhost
  tasks:
    - name: "Charger les variables de migration"
      include_vars: variables.yml
      always_run: yes
    - name: "Deconnecter les sessions ssh de {{ source.host }}"
      local_action: >
          shell ssh -O stop {{ source.host }}
          -o ControlPath=/tmp/ansible-ssh-{{ source.user | default("root") }}-{{ source.host }}-{{ source.port | default(22) }}
      run_once: yes
      ignore_errors: yes
    - name: Déclarer le serveur cible {{ source.host }} dans l'inventaire
      add_host: hostname={{ source.host }}
        ansible_user={{ source.user | default("root") }}
        ansible_port={{ source.port | default(22) }}
        ansible_ssh_common_args="{% if source.key is defined and source.key %} -i {{ source.key }} {% else %} -o PubkeyAuthentication=no -o StrictHostKeyChecking=no {% endif %}"        ansible_ssh_pass={{ source.pass }}
        ansible_ssh_pass={{ source.pass }}
        ansible_become={{ (source.user == "root") | ternary(false,true) }}
        ansible_become_pass={{ source.pass }}
      always_run: yes
    - name: "Deconnecter les sessions ssh de {{ target.host }}"
      local_action: >
          shell ssh -O stop {{ target.host }}
          -o ControlPath=/tmp/ansible-ssh-{{ target.user | default("root") }}-{{ target.host }}-{{ target.port | default(22) }}
      run_once: yes
      ignore_errors: yes
    - name: Déclarer le serveur cible {{ target.host }} dans l'inventaire
      add_host: hostname={{ target.host }}
        ansible_user={{ target.user | default("root") }}
        ansible_port={{ target.port | default(22) }}
        ansible_ssh_common_args="{% if target.key is defined and target.key %} -i {{ target.key }} {% else %} -o PubkeyAuthentication=no -o StrictHostKeyChecking=no {% endif %}"        ansible_ssh_pass={{ target.pass }}
        ansible_ssh_pass={{ target.pass }}
        ansible_become={{ (target.user == "root") | ternary(false,true) }}
        ansible_become_pass={{ target.pass }}
      always_run: yes
- hosts: "{{ hostvars.localhost.source.host }}"
  tasks:
    - debug: msg="Connexion au serveur cible {{ ansible_host }}"
- hosts: "{{ hostvars.localhost.target.host }}"
  tasks:
    - debug: msg="Connexion au serveur cible {{ ansible_host }}"
    # Pour traiter les commands rsync expext est requis
    - apt: name=sshpass update_cache=yes state=present
      become: true
    - name: Importer les données depuis la source
      command:
        sshpass -p {{ hostvars.localhost.source.pass }}
        rsync --partial -az --progress
          -e "ssh -p {{ hostvars.localhost.source.port }}"
          --rsync-path="sudo rsync"
          {{ hostvars.localhost.source.user }}@{{ hostvars.localhost.source.host }}:{{ hostvars.localhost.source.path }}/
          {{ hostvars.localhost.target.path }}
- hosts: "{{ hostvars.localhost.source.host }}"
  tasks:
    - name: Activer la maintenance sur le site {{ hostvars.localhost.source.domain }}
      copy: src=templates/maintenance.html dest={{ hostvars.localhost.source.path }}/maintenance.html
    - name: "Activation de la maintenance 1/2"
      lineinfile:
        dest: "{{ hostvars.localhost.source.path }}/.htaccess"
        line: "RewriteCond %{DOCUMENT_ROOT}/maintenance.html -f"
        insertbefore: BOF
    - name: "Activation de la maintenance 2/2"
      lineinfile:
        dest: "{{ hostvars.localhost.source.path }}/.htaccess"
        line: "RewriteRule . maintenance.html [L]"
        insertafter: "RewriteCond %{DOCUMENT_ROOT}/maintenance.html -f"
    - apt: name=python-mysqldb update_cache=yes state=present
      become: true
    - name: "Export de la base de donnée {{ hostvars.localhost.source.database.name }}"
      mysql_db: >
        login_user={{ hostvars.localhost.source.database.user }}
        login_password={{ hostvars.localhost.source.database.pass }}
        login_host={{ hostvars.localhost.source.database.host }}
        name={{ hostvars.localhost.source.database.name }}
        state=dump
        target=/tmp/{{ hostvars.localhost.source.database.name }}.sql
- hosts: "{{ hostvars.localhost.target.host }}"
  tasks:
    - name: Importer la base de données
      command:
        sshpass -p {{ hostvars.localhost.source.pass }}
        rsync --partial -az --progress
          -e "ssh -p {{ hostvars.localhost.source.port }}"
          --rsync-path="sudo rsync"
          {{ hostvars.localhost.source.user }}@{{ hostvars.localhost.source.host }}:/tmp/{{ hostvars.localhost.source.database.name }}.sql
          /tmp/{{ hostvars.localhost.source.database.name }}.sql
    - apt: name=python-mysqldb update_cache=yes state=present
      become: true
    - mysql_db: >
        config_file=""
        login_user={{ hostvars.localhost.target.database.user }}
        login_password={{ hostvars.localhost.target.database.pass }}
        login_host={{ hostvars.localhost.target.database.host }}
        name={{ hostvars.localhost.target.database.name }}
        state=import
        target=/tmp/{{ hostvars.localhost.source.database.name }}.sql
    - name: Importer les données manquante depuis la source
      command:
        sshpass -p {{ hostvars.localhost.source.pass }}
        rsync --partial -az --progress
          -e "ssh -p {{ hostvars.localhost.source.port }}"
          --rsync-path="sudo rsync"
          {{ hostvars.localhost.source.user }}@{{ hostvars.localhost.source.host }}:{{ hostvars.localhost.source.path }}/
          {{ hostvars.localhost.target.path }}
- hosts: "{{ hostvars.localhost.source.host }}"
  tasks:
    - name: "Activer le mode proxy"
      apache2_module: state=present name=proxy_http
    - name: "Activation du mode proxy"
      template: src=templates/proxy.j2 dest=/etc/apache2/conf.d/000-proxy-{{ hostvars.localhost.source.domain }}.conf
    - name: "Relancer apache"
      service: name=apache2 state=reloaded